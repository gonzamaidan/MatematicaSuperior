


function varargout = MS(varargin)

global fx;
% MS MATLAB code for MS.fig
%      MS, by itself, creates a new MS or raises the existing
%      singleton*.
%
%      H = MS returns the handle to a new MS or the handle to
%      the existing singleton*.
%
%      MS('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in MS.M with the given input arguments.
%
%      MS('Property','Value',...) creates a new MS or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before MS_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to MS_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help MS

% Last Modified by GUIDE v2.5 21-Oct-2015 14:47:58

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @MS_OpeningFcn, ...
                   'gui_OutputFcn',  @MS_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

% --- Executes just before MS is made visible.
function MS_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to MS (see VARARGIN)

% Choose default command line output for MS
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% This sets up the initial plot - only do when we are invisible
% so window can get raised using MS.
if strcmp(get(hObject,'Visible'),'off')
    plot(rand(5));
end

% UIWAIT makes MS wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = MS_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;

% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
global fx;
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
axes(handles.axes1);
cla;

popup_sel_index = get(handles.popupmenu1, 'Value');
periodo = handles.periodo;
calculo(popup_sel_index,handles,hObject);
f=fx;
hold on;
plot(linspace(0,periodo),f);
%switch popup_sel_index
 %   case 1
  %      plot();



% --------------------------------------------------------------------
function FileMenu_Callback(hObject, eventdata, handles)
% hObject    handle to FileMenu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function OpenMenuItem_Callback(hObject, eventdata, handles)
% hObject    handle to OpenMenuItem (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
file = uigetfile('*.fig');
if ~isequal(file, 0)
    open(file);
end

% --------------------------------------------------------------------
function PrintMenuItem_Callback(hObject, eventdata, handles)
% hObject    handle to PrintMenuItem (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
printdlg(handles.figure1)

% --------------------------------------------------------------------
function CloseMenuItem_Callback(hObject, eventdata, handles)
% hObject    handle to CloseMenuItem (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
selection = questdlg(['Close ' get(handles.figure1,'Name') '?'],...
                     ['Close ' get(handles.figure1,'Name') '...'],...
                     'Yes','No','Yes');
if strcmp(selection,'No')
    return;
end

delete(handles.figure1)


% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu1


% --- Executes during object creation, after setting all properties.
function popupmenu1_CreateFcn(hObject, eventdata, handles)


% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
     set(hObject,'BackgroundColor','white');
end

set(hObject, 'String', {'f(x)= 1', 'f(x)= x','f(x)=x periodo'});



function edit2_Callback(hObject, eventdata, handles)
periodo=str2double(get(hObject,'String'));
handles.periodo = periodo;
guidata(hObject,handles);

% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit2 as text
%        str2double(get(hObject,'String')) returns contents of edit2 as a double


% --- Executes during object creation, after setting all properties.
function edit2_CreateFcn(hObject, eventdata, handles)

% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit3_Callback(hObject, eventdata, handles)
constante=str2double(get(hObject,'String'));
handles.constante = constante;
guidata(hObject,handles);
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit3 as text
%        str2double(get(hObject,'String')) returns contents of edit3 as a double


% --- Executes during object creation, after setting all properties.
function edit3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit4_Callback(hObject, eventdata, handles)
cant_n=str2double(get(hObject,'String'));
handles.cant_n =cant_n;
guidata(hObject,handles);

function edit4_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit5_Callback(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit5 as text
%        str2double(get(hObject,'String')) returns contents of edit5 as a double


% --- Executes during object creation, after setting all properties.
function edit5_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function calculo(funcion,handles,hObject)
global fx;
axes(handles.axes1);
cla;
i=1;
syms u k;
%periodo=input('Periodo:');
%const=input('Constante:');
%n_cant=input('N:');
n_cant = handles.cant_n;
periodo= handles.periodo;
const= handles.constante;
n=[1:1:n_cant];
an=[1:1:n_cant];
bn=[1:1:n_cant]; %Lo declaro para saber cuantas bn va a haber
L=periodo/2;
w=2*pi/periodo;
x=linspace(0,periodo);

fa=0;
fb=0;%Con este sumo todas las bn*sin(nwx)
%hold on;

while i<=n_cant
    %subplot(2,1,1);
     switch funcion
        case 1
            AN=@(u)(u<=L).*const.*cos(i.*u.*w);
            BN=@(u)(u<=L).*const.*sin(i.*u.*w);
            A0=@(u)(u<=L).*const;
            y=(x<=(L)).*const;
            plot(x,y,'r');
            
         case 2
             x=linspace(0,periodo);
            AN=@(u)(u).*const.*cos(i.*u.*w);
            BN=@(u)(u).*const.*sin(i.*u.*w);
            A0=@(u)(u).*const;
            y=x.*const;
            plot(x,y,'r');
         case 3
             
            AN=@(u)((u>=L).*(-1).*(u-periodo)+(u<L).*u).*const.*cos(i.*u.*w);
            BN=@(u)((u>=L).*(-1).*(u-periodo)+(u<L).*u).*const.*sin(i.*u.*w);
            A0=@(u)((u>=L).*(-1).*(u-periodo)+(u<L).*u).*const;
            y=((x>=L).*(-1).*(x-periodo)+(x<L).*x).*const;
            plot(x,y,'r');
     end
    
    %p=@(u)func.*const.*sin(i.*u.*w); 
    %Al final habia que declarar todo lo que va en la integral como una
    %funcion simbolica o function handler que es lo del @
    %Y ademas cada n la calcule separada dentro del while, la n seria la i
    an(i)=((integral(AN,0,periodo))./L);
    bn(i)=((integral(BN,0,periodo))./L); %Guardo cada bn
    fa=fa+an(i).*cos(i.*w.*x);
    fb=fb+bn(i).*sin(i.*w.*x);
    i=i+1;
end
%plot((n.*w),bn,'.');
%hold off;
%subplot(2,1,2);
%hold on;
%plot(x,y,'b');%La fx para comparar con la aprox en azul
%t=@(u)func.*const;%La fx declarada con el @ para poder integrar a0
a0=integral(A0,0,periodo)./periodo;
fx= fb+a0+fa;
%error=abs(integral(symsum(A0-fx,1,n_cant),0,periodo));

display (error);
hold off;

